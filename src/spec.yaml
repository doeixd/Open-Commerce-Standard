openapi: 3.0.3
info:
  title: Open Commerce Standard (OCS)
  version: 1.0.0
  description: |
    An open, minimal, and extensible standard for all forms of digital commerce.

    **Core Philosophy:**
    This standard defines the absolute minimum required for interoperable digital commerce. It achieves flexibility by delegating complex, domain-specific data to a structured `metadata` field. The nature and schema of this metadata are made discoverable through a capabilities endpoint.

    **Key Systems:**
    1.  **Capability & Metadata Discovery:** A server advertises its features and metadata schemas via the `/capabilities` endpoint. This allows clients to adapt to different product types (physical, digital) and features (shipment tracking, product variants) on the fly.
    2.  **Minimalist Commerce Core:** The standard generalizes the `Cart` -> `Order` flow. A single `fulfillmentType` field on products is the only mandatory addition, enabling clients to handle physical, digital, and pickup goods.
    3.  **HTTP-Native Design:** The standard uses core HTTP principles, including RESTful resources, standard verbs and status codes, and Server-Sent Events (SSE) for real-time updates.

servers:
  - url: https://{domain}/api/v1
    variables:
      domain:
        default: example.com
        description: The domain name of the API server.

tags:
  - name: Discovery
    description: Endpoints for discovering vendors, products, and server capabilities.
  - name: Cart Management
    description: Operations for creating and managing a shopping cart.
  - name: Ordering
    description: Endpoints for placing and managing orders, including real-time updates.

paths:
  /capabilities:
    get:
      tags: [Discovery]
      summary: Discover Server Capabilities
      description: |
        Returns a list of all OCS Capability Modules supported by this server.
        Clients can use this information to understand which optional features are enabled,
        what metadata schemas to expect, and how to adapt their UI and behavior accordingly.
      responses:
        '200':
          description: A list of supported capabilities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilitiesResponse'
         '500':
           $ref: '#/components/responses/ServerError'

   /orders/{orderId}/cancel:
     post:
       tags: [Ordering]
       summary: Request to cancel an order
       description: Initiates a request to cancel an order. This action is only available if advertised in the order's `actions` array.
       security:
         - bearerAuth: []
       parameters:
         - name: orderId
           in: path
           required: true
           schema: { type: string }
       requestBody:
         content:
           application/ocs+json; version=1.0:
             schema:
               type: object
               properties:
                 reason: { type: string }
       responses:
         '200':
           description: The cancellation was successful. The updated Order object is returned with status 'cancelled'.
           content:
             application/ocs+json; version=1.0:
               schema: { $ref: '#/components/schemas/Order' }
         '403':
           description: The order is not in a state where it can be cancelled.
           content:
             application/ocs+json; version=1.0:
               schema: { $ref: '#/components/schemas/Error' }

   /orders:
    post:
      tags: [Ordering]
      summary: Place an order from a cart
      security:
        - bearerAuth: []
      description: This endpoint initiates the order process. It may return a 402 if payment is required.
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - name: X-PAYMENT
          in: header
          schema:
            type: string
          description: "Base64-encoded JSON `PaymentPayload`, provided in a retry after a 402 response."
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
         '201':
           description: |
             The order(s) were successfully created. The response will contain a single Order object by default.
             If the `dev.ocs.order.fulfillment_intent@1.0` capability was used and resulted in multiple fulfillment groups, this response will contain an array of the created Order objects.
           headers:
             X-PAYMENT-RESPONSE:
               schema:
                 type: string
               description: Base64-encoded JSON `SettlementResponse` containing payment settlement details.
           content:
             application/ocs+json; version=1.0:
               schema:
                 oneOf:
                   - $ref: '#/components/schemas/Order'
                   - type: array
                     items:
                       $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          description: Payment is required to proceed. The body contains payment requirements as per the x402 protocol.
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: '#/components/schemas/X402PaymentRequiredResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders/{orderId}:
    get:
      tags: [Ordering]
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The order object.
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders/{orderId}/updates:
    get:
      tags: [Ordering]
      summary: Subscribe to real-time order updates (SSE)
      security:
        - bearerAuth: []
       description: |
         Establishes a Server-Sent Events (SSE) connection to receive real-time updates for an order.
         The client should handle a `text/event-stream` response.

         **Events:**
         - `order.patch`: The `data` field will contain a JSON array of patch operations conforming to RFC 6902 (JSON Patch). This event is sent whenever the order object is updated.
           - Patches to the core `/status` field represent changes to the order's programmatic state category.
           - Patches to `/metadata/dev.ocs.order.detailed_status@1.0` represent changes to the rich, human-readable status meant for display.
           - The server will bundle related status changes into a single message to ensure atomic updates.
         - `close`: Indicates the order has reached a terminal state (`completed`, `cancelled`). The server will close the connection after sending this event.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An active SSE stream. The connection will remain open until the order is in a terminal state.
          content:
            text/event-stream:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/ServerError'

  /orders/{orderId}/ratings:
    post:
      tags: [Ordering]
      summary: Submit ratings for a completed order
      description: Allows customers to submit ratings and feedback for a completed order. This action is only available if advertised in the order's `actions` array.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: '#/components/schemas/RatingRequest'
      responses:
        '201':
          description: The ratings were successfully submitted.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: '#/components/schemas/Order' }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /carts/{cartId}/promotions:
    post:
      tags: [Cart Management]
      summary: Apply or validate a promotion on a cart
      description: Validates and applies a promotion (e.g., promo code, gift card) to the specified cart, updating the cart's totals accordingly.
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: '#/components/schemas/PromotionRequest'
      responses:
        '200':
          description: The promotion was successfully applied. The updated Cart object is returned.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: '#/components/schemas/Cart' }
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # --- Capability Discovery Schemas ---
    CapabilitiesResponse:
      type: object
      properties:
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
    Capability:
      type: object
      properties:
        id:
          type: string
          description: "The unique, versioned identifier for the capability."
          example: "dev.ocs.product.variants@1.0"
        schemaUrl:
          type: string
          format: uri
          description: "The URL pointing to the JSON Schema that defines the structure for this capability's metadata."
          example: "https://schemas.ocs.dev/product/variants/v1.json"
        metadata:
          type: object
          description: "Optional metadata providing implementation-specific details for this capability, such as endpoint URLs or configuration options."

    # --- OCS Core Schemas ---
    Money:
      type: object
      properties:
        amount: { type: string, description: "Monetary amount as a string.", example: "12.99" }
        currency: { type: string, description: "ISO 4217 currency code.", example: "USD" }
      required: [amount, currency]

    Location:
      type: object
      properties:
        address: { type: string }
        latitude: { type: number }
        longitude: { type: number }
      required: [address]

    Store:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        location: { $ref: '#/components/schemas/Location' }
        catalogIds: { type: array, items: { type: string } }
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Standard capabilities
            will use their ID as a key.
            Examples:
            - "dev.ocs.restaurant.profile@1.0"
            - "dev.ocs.store.constraints@1.0"
      required: [id, name, location]

    CatalogSummary:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        version: { type: string, description: "Version identifier for the catalog." }
      required: [id, name, version]

    Catalog:
      allOf:
        - $ref: '#/components/schemas/CatalogSummary'
        - type: object
          properties:
            items: { type: array, items: { $ref: '#/components/schemas/CatalogItem' } }
            metadata:
              type: object
              description: |
                Namespaced key-value pairs. The structure of this object may be defined
                by schemas discoverable at the `/capabilities` endpoint. Standard capabilities
                will use their ID as a key.
                Examples:
                - "dev.ocs.promotions.discoverable@1.0"
          required: [items]

    CatalogItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        price: { $ref: '#/components/schemas/Money' }
        available: { type: boolean, default: true }
        fulfillmentType:
          type: string
          enum: [pickup, physical, digital]
          description: "The fulfillment method for this item, which dictates the required information for an order."
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Standard capabilities
            will use their ID as a key.
            Examples:
            - "dev.ocs.product.variants@1.0"
            - "dev.ocs.product.customization@1.0"
            - "dev.ocs.product.addons@1.0"
            - "dev.ocs.product.physical_properties@1.0"
      required: [id, name, price, available, fulfillmentType]

    CreateCartRequest:
      type: object
      properties:
        storeId: { type: string, format: uuid }
      required: [storeId]

    CartItemRequest:
      type: object
      properties:
        itemId: { type: string }
        quantity: { type: integer, minimum: 1 }
        addOnIds: { type: array, items: { type: string } }
        notes: { type: string }
        customizations:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: "Key-value map of selected customizations, where the key is the group ID and value is the selected option ID(s)."
          example: {"group_size": "size_large", "group_toppings": ["topping_pepperoni", "topping_onions"]}
      required: [itemId, quantity]

    UpdateCartItemRequest:
      type: object
      properties:
        quantity: { type: integer, minimum: 1 }
        notes: { type: string, nullable: true }
        addOnIds: { type: array, items: { type: string } }
        customizations:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: "Key-value map of selected customizations, where the key is the group ID and value is the selected option ID(s)."

    Cart:
      type: object
      properties:
        id: { type: string, format: uuid }
        items: { type: array, items: { $ref: '#/components/schemas/CartItem' } }
        subtotal: { $ref: '#/components/schemas/Money' }
        tax: { $ref: '#/components/schemas/Money' }
        total: { $ref: '#/components/schemas/Money' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, items, subtotal, tax, total, createdAt, updatedAt]

    CartItem:
      allOf:
        - $ref: '#/components/schemas/CartItemRequest'
        - type: object
          properties:
            cartItemId: { type: string, format: uuid, description: "Unique identifier for this item instance in the cart." }
            price: { $ref: '#/components/schemas/Money' }
            metadata: { type: object, description: "Namespaced key-value pairs." }
          required: [cartItemId, price]

    CreateOrderRequest:
      type: object
      properties:
        cartId: { type: string, format: uuid }
        deliveryAddress:
          $ref: '#/components/schemas/Location'
          description: "A delivery address is required if, and only if, the referenced cart contains at least one item with a fulfillmentType of 'physical'."
        notes: { type: string }
        metadata: { type: object }
      required: [cartId]

     PromotionRequest:
       type: object
       description: A request to apply or validate a promotion on a cart.
       properties:
         type:
           type: string
           enum: [promo_code, gift_card, loyalty_points]
           description: "The type of promotion being applied."
         value:
           type: string
           description: "The value for the promotion (e.g., the code 'SUMMER10')."
       required: [type, value]

     RatingRequest:
       type: object
       description: A request to submit ratings for a completed order.
       properties:
         food:
           type: integer
           minimum: 1
           maximum: 5
           description: "Rating for the food quality (1-5 stars)."
         delivery:
           type: integer
           minimum: 1
           maximum: 5
           description: "Rating for the delivery service (1-5 stars)."
         restaurant:
           type: integer
           minimum: 1
           maximum: 5
           description: "Overall rating for the restaurant (1-5 stars)."
         comment:
           type: string
           description: "Optional text comment from the customer."

     ValidationIssue:
       type: object
       description: "Details a failed validation rule on a specific field."
       properties:
         type: { type: string, enum: ["validation"] }
         field: { type: string, description: "A JSON Pointer to the invalid field in the request body." }
         value: { description: "The invalid value that was provided by the client." }
         reason: { type: string, description: "A description of the validation rule that failed (e.g., 'String must be a valid UUID')." }
       required: [type, field, reason]

     BusinessLogicIssue:
       type: object
       description: "Details a failed business rule involving one or more resources."
       properties:
         type: { type: string, enum: ["business_logic"] }
         resourceId: { type: string, description: "The ID of the resource that caused the issue (e.g., an out-of-stock itemId)." }
         reason: { type: string, description: "A description of the business rule that was violated (e.g., 'The requested item has 0 stock remaining')." }
       required: [type, resourceId, reason]

    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        status:
          type: string
          description: |
            A required, standardized status code representing the programmatic state category of the order.
            This is intended for client-side logic (e.g., state machines), NOT for direct display to the user.
            For rich, human-readable status, clients should check for the 'dev.ocs.order.detailed_status@1.0' capability.
          enum:
            - pending     # Order created, but not yet confirmed by the system (e.g., awaiting inventory check).
            - confirmed   # The order is accepted and will be processed.
            - processing  # The order is actively being worked on (e.g., kitchen is preparing, item is being manufactured).
            - in_transit  # The order has left the origin and is on its way to the destination.
            - completed   # The order has been successfully fulfilled (delivered, picked up, or digitally accessed).
            - cancelled   # The order has been cancelled by the user or the system.
         actions:
           type: array
           description: |
             A list of actions the client can perform on this order in its current state.
             The presence of an action indicates the user should be shown the corresponding UI control.
           items:
             type: object
             properties:
               id: { type: "string", enum: ["cancel", "initiate_return", "add_rating"] }
               href: { type: "string", format: "uri", description: "The API endpoint to call to perform this action." }
             required: [id, href]
         returns:
           type: array
           description: "A list of summaries for any returns associated with this order."
           items:
             $ref: '#/components/schemas/ReturnSummary'
        items: { type: array, items: { $ref: '#/components/schemas/CartItem' } }
        total: { $ref: '#/components/schemas/Money' }
        deliveryAddress: { $ref: '#/components/schemas/Location' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Standard capabilities
            will use their ID as a key.
            Examples:
            - "dev.ocs.order.shipment_tracking@1.0"
            - "dev.ocs.order.kitchen_status@1.0"
            - "dev.ocs.order.delivery_tracking@1.0"
            - "dev.ocs.order.tipping@1.0"
            - "dev.ocs.order.digital_access@1.0"
            - "dev.ocs.order.detailed_status@1.0"
       required: [id, status, items, total, createdAt, updatedAt]

    InitiateReturnRequest:
      type: object
      description: "The request body for initiating a return for items from an order."
      properties:
        items:
          type: array
          description: "The list of items and quantities to be returned."
          items:
            type: object
            properties:
              cartItemId: { type: string, description: "The ID of the item from the original order." }
              quantity: { type: integer, minimum: 1 }
            required: [cartItemId, quantity]
        reason: { type: string, description: "The user-provided reason for the return." }
      required: [items, reason]

     ReturnSummary:
       type: object
       description: "A summary of a return, intended for embedding in the Order object."
       properties:
         id: { type: string, format: "uuid", description: "The unique ID of the return." }
         status: { type: string, enum: ["requested", "approved", "rejected", "in_transit", "received", "processed", "completed"] }
         href: { type: string, format: "uri", description: "The URL to fetch the full Return object." }
       required: [id, status, href]

     Return:
       type: object
       description: "The full Return object, representing the complete state of a return workflow."
       properties:
         id: { type: string, format: "uuid" }
         orderHref: { type: string, format: "uri", description: "A link back to the original Order." }
         status: { type: string, enum: ["requested", "approved", "rejected", "in_transit", "received", "processed", "completed"] }
         items:
           type: array
           items:
             type: object
             properties:
               cartItemId: { type: string, description: "The ID of the item from the original order." }
               quantity: { type: integer }
         reason: { type: string }
         returnLabelUrl: { type: string, format: "uri", description: "A URL to a printable shipping label." }
         createdAt: { type: string, format: "date-time" }
         updatedAt: { type: string, format: "date-time" }
       required: [id, orderHref, status, items, createdAt, updatedAt]

     JsonPatchOperation:
      type: object
      description: "A single JSON Patch operation, as defined by RFC 6902."
      required: [op, path]
      properties:
        op: { type: string, enum: [add, remove, replace, move, copy, test] }
        path: { type: string, description: "A JSON Pointer path." }
        value: { description: "The value for the operation." }
        from: { type: string, description: "A JSON Pointer path. Used in 'move' and 'copy' ops." }

    # --- X402 Protocol Schemas ---
    X402PaymentRequiredResponse:
      type: object
      description: "The response body for a 402 Payment Required status. See x402 spec section 5.1."
      properties:
        x402Version: { type: number, description: "Protocol version identifier." }
        error: { type: string, description: "Human-readable error message explaining why payment is required." }
        accepts: { type: array, items: { $ref: '#/components/schemas/X402PaymentRequirements' } }
      required: [x402Version, error, accepts]

    X402PaymentRequirements:
      type: object
      description: "Details a single payment method accepted by the server. See x402 spec section 5.1.2."
      properties:
        scheme: { type: string, example: "exact" }
        network: { type: string, example: "base-sepolia" }
        maxAmountRequired: { type: string, example: "10000" }
        asset: { type: string }
        payTo: { type: string }
        resource: { type: string, format: uri }
        description: { type: string }
        mimeType: { type: string, example: "application/json" }
        outputSchema: { type: object }
        maxTimeoutSeconds: { type: number }
        extra: { type: object }
      required: [scheme, network, maxAmountRequired, asset, payTo, resource, description, maxTimeoutSeconds]

    X402PaymentPayload:
      type: object
      description: "The JSON payload sent in the X-PAYMENT header (base64-encoded). See x402 spec section 5.2."
      properties:
        x402Version: { type: number, example: 1 }
        scheme: { type: string, example: "exact" }
        network: { type: string, example: "base-sepolia" }
        payload: { oneOf: [ { $ref: '#/components/schemas/X402ExactSchemePayload' } ] }
      required: [x402Version, scheme, network, payload]

    X402ExactSchemePayload:
      type: object
      description: "The payload for the 'exact' payment scheme. See x402 spec section 5.2.2."
      properties:
        signature: { type: string }
        authorization: { $ref: '#/components/schemas/X402Authorization' }
      required: [signature, authorization]

    X402Authorization:
      type: object
      description: "EIP-3009 authorization parameters. See x402 spec section 5.2.2."
      properties:
        from: { type: string }
        to: { type: string }
        value: { type: string }
        validAfter: { type: string }
        validBefore: { type: string }
        nonce: { type: string }
      required: [from, to, value, validAfter, validBefore, nonce]

    X402SettlementResponse:
      type: object
      description: "The JSON payload in the X-PAYMENT-RESPONSE header (base64-encoded). See x402 spec section 5.3."
      properties:
        success: { type: boolean }
        errorReason: { type: string }
        transaction: { type: string }
        network: { type: string }
        payer: { type: string }
      required: [success, transaction, network, payer]

    Error:
      type: object
      description: "A structured error response that communicates with the machine, the developer, and the end-user."
      properties:
        code:
          type: string
          description: "A specific, machine-readable error code for programmatic handling."
          enum:
            # General
            - bad_request
            - unauthorized
            - forbidden
            - not_found
            - conflict
            - server_error
            # Idempotency
            - idempotency_key_reused
            # Cart & Product
            - product_unavailable
            - product_customization_invalid
            # Promotions
            - promotion_invalid
            - promotion_expired
            - promotion_not_applicable
            - promotion_stacking_not_allowed
            # Fulfillment & Ordering
            - delivery_address_required
            - delivery_address_invalid
            - fulfillment_intent_incomplete
            - fulfillment_intent_duplicate_item
            - fulfillment_method_invalid
            # Payments
            - payment_failed
            # Cancellation & Returns
            - cancellation_window_expired
            - return_policy_violated
        message:
          type: string
          description: "A developer-facing, human-readable message, NOT for display to the end-user."
        details:
          type: array
          description: "An array of structured objects providing deep context about the error."
          items:
            oneOf:
              - $ref: '#/components/schemas/ValidationIssue'
              - $ref: '#/components/schemas/BusinessLogicIssue'
        userMessage:
          type: object
          description: "A localization-friendly, user-safe message. The client should use this to build the UI message."
          properties:
            localizationKey:
              type: string
              description: "An i18n key the client can use to look up a translated string."
              example: "error.promotion.expired"
            params:
              type: object
              description: "A key-value map of parameters to inject into the localized string."
              example: { "code": "WINTER20", "expiryDate": "2024-01-31" }
        nextActions:
          type: array
          description: "A list of suggested, valid actions the client can take to recover from this error."
          items:
            type: object
            properties:
              id: { type: string, description: "A programmatic identifier for the action." }
              href: { type: string, format: "uri", description: "The endpoint to call for this action." }
              method: { type: string, enum: ["GET", "POST", "PATCH", "DELETE"] }
      required: [code, message]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter the Bearer token. The specific method of acquiring the token (e.g., API Key, OAuth2, SIWE) is determined by the server implementation and may be discoverable via the /capabilities endpoint."

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema: { type: string, format: uuid }
      description: A unique key to prevent duplicate requests.
    Limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      description: The maximum number of results to return.
    Cursor:
      name: cursor
      in: query
      schema: { type: string }
      description: The cursor for the next page of results.

  responses:
    BadRequest:
      description: The request was malformed or invalid.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Authentication credentials are required and are missing or invalid.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }
    Forbidden:
      description: The client is not authorized to perform this action.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: The requested resource could not be found.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: A conflict occurred, such as a reused idempotency key with a different request body.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }
    ServerError:
      description: An unexpected server error occurred.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: '#/components/schemas/Error' }