openapi: 3.0.3
info:
  title: Open Commerce Standard (OCS)
  version: 1.0.0
  description: |
    An open, minimal, and extensible standard for all forms of digital commerce.

    **Core Philosophy:**
    This standard defines the absolute minimum required for interoperable digital commerce. It achieves flexibility by delegating complex, domain-specific data to a structured `metadata` field. The nature and schema of this metadata are made discoverable through a capabilities endpoint.

    **Key Systems:**
    1.  **Capability & Metadata Discovery:** A server advertises its features and metadata schemas via the `/capabilities` endpoint. This allows clients to adapt to different product types (physical, digital) and features (shipment tracking, product variants) on the fly.
    2.  **Minimalist Commerce Core:** The standard generalizes the `Cart` -> `Order` flow. A single `fulfillmentType` field on products is the only mandatory addition, enabling clients to handle physical, digital, and pickup goods.
    3.  **HTTP-Native Design:** The standard uses core HTTP principles, including RESTful resources, standard verbs and status codes, and Server-Sent Events (SSE) for real-time updates.

    ## Rate Limiting

    OCS servers SHOULD implement rate limiting to prevent abuse. Rate limiting MUST be communicated via standard headers.

    ### Headers

    Servers SHOULD return these headers on all responses:

    ```http
    X-RateLimit-Limit: 100
    X-RateLimit-Remaining: 95
    X-RateLimit-Reset: 1698105600
    ```

    **Header Definitions:**
    - `X-RateLimit-Limit`: Maximum requests allowed in the current window
    - `X-RateLimit-Remaining`: Requests remaining in current window
    - `X-RateLimit-Reset`: Unix timestamp when the limit resets

    ### 429 Too Many Requests Response

    When rate limit is exceeded:

    ```http
    HTTP/1.1 429 Too Many Requests
    X-RateLimit-Limit: 100
    X-RateLimit-Remaining: 0
    X-RateLimit-Reset: 1698105600
    Retry-After: 120
    Content-Type: application/problem+json

    {
      "type": "https://schemas.ocs.dev/errors/rate-limit-exceeded",
      "title": "Rate Limit Exceeded",
      "status": 429,
      "detail": "Rate limit of 100 requests per minute exceeded",
      "instance": "https://api.example.com/some-endpoint",
      "timestamp": "2023-10-23T12:00:00Z",
      "localizationKey": "error.rate_limit.exceeded"
    }
    ```

    ### Discoverable Rate Limits

    Servers MAY advertise rate limit policies via the `dev.ocs.server.rate_limits@1.0` capability:

    ```json
    {
      "id": "dev.ocs.server.rate_limits@1.0",
      "schemaUrl": "https://schemas.ocs.dev/server/rate_limits/v1.json",
      "metadata": {
        "authenticated": {
          "limit": 1000,
          "window": 3600,
          "unit": "requests per hour"
        },
        "anonymous": {
          "limit": 100,
          "window": 3600,
          "unit": "requests per hour"
        },
        "burstLimit": {
          "limit": 20,
          "window": 1,
          "unit": "requests per second"
        }
      }
    }
    ```

servers:
  - url: https://{domain}/api/v1
    variables:
      domain:
        default: example.com
        description: The domain name of the API server.

tags:
  - name: Discovery
    description: Endpoints for discovering vendors, products, and server capabilities.
  - name: Cart Management
    description: Operations for creating and managing a shopping cart.
  - name: Ordering
    description: Endpoints for placing and managing orders, including real-time updates.

paths:
  /.well-known/ocs:
    get:
      tags: [Discovery]
      summary: OCS Discovery Endpoint
      description: |
        RFC 8615-compliant discovery endpoint that provides the canonical location of OCS API resources.
        This is the primary discovery mechanism for clients to locate the capabilities endpoint and other
        core API resources. Servers SHOULD include CORS headers and cache directives on this endpoint.
      responses:
        "200":
          description: OCS discovery metadata
          headers:
            Cache-Control:
              schema:
                type: string
                example: "max-age=86400"
              description: Recommended cache duration (24 hours)
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
              description: CORS header for cross-origin discovery
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OCSDiscoveryResponse"
              example:
                ocs:
                  capabilities: "https://shop.example.com/ocs/capabilities"
                  version: "1.0"
                  context: "https://schemas.ocs.dev/context.jsonld"
                  payment: "https://shop.example.com/ocs/payment"
        "404":
          description: Discovery endpoint not implemented
        "500":
          $ref: "#/components/responses/ServerError"

  /capabilities:
    get:
      tags: [Discovery]
      summary: Discover Server Capabilities
      description: |
        Returns a list of all OCS Capability Modules supported by this server.
        Clients can use this information to understand which optional features are enabled,
        what metadata schemas to expect, and how to adapt their UI and behavior accordingly.
      responses:
        "200":
          description: A list of supported capabilities.
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/CapabilitiesResponse"
        "500":
          $ref: "#/components/responses/ServerError"

  /stores:
    get:
      tags: [Discovery]
      summary: List available stores
      description: Returns a paginated list of all stores/vendors available on this server.
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Cursor"
      responses:
        "200":
          description: Paginated list of stores
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/StoresResponse"
        "500":
          $ref: "#/components/responses/ServerError"

  /catalogs:
    get:
      tags: [Discovery]
      summary: List available catalogs
      description: Returns a paginated list of catalogs, optionally filtered by store.
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Cursor"
        - name: storeId
          in: query
          schema: { type: string, format: uuid }
          description: Filter catalogs by store ID
      responses:
        "200":
          description: Paginated list of catalogs
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/CatalogsResponse"
        "500":
          $ref: "#/components/responses/ServerError"

  /catalogs/{catalogId}:
    get:
      tags: [Discovery]
      summary: Get a full product catalog by ID
      parameters:
        - name: catalogId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/AcceptOCSCapabilities"
      responses:
        "200":
          description: The full catalog with all products
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Catalog"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /carts:
    post:
      tags: [Cart Management]
      summary: Create a new shopping cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/CreateCartRequest"
      responses:
        "201":
          description: Cart created successfully
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

  /carts/{cartId}:
    get:
      tags: [Cart Management]
      summary: Get a cart by ID
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/AcceptOCSCapabilities"
      responses:
        "200":
          description: The cart object
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Cart not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                type: "https://schemas.ocs.dev/errors/cart-not-found"
                title: "Cart Not Found"
                status: 404
                detail: "Cart does not exist or has been submitted"
                instance: "https://api.example.com/carts/123"
                timestamp: "2023-10-23T12:00:00Z"
        "410":
          description: Cart expired
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                type: "https://schemas.ocs.dev/errors/cart-expired"
                title: "Cart Expired"
                status: 410
                detail: "Cart expired after 3600 seconds of inactivity"
                instance: "https://api.example.com/carts/123"
                timestamp: "2023-10-23T12:00:00Z"
                localizationKey: "error.cart.expired"
                nextActions:
                  - id: "create_new_cart"
                    href: "/carts"
                    method: "POST"
                    title: "Create New Cart"
        "500":
          $ref: "#/components/responses/ServerError"

  /carts/{cartId}/items:
    post:
      tags: [Cart Management]
      summary: Add an item to the cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/CartItemRequest"
      responses:
        "200":
          description: Item added, updated cart returned
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

  /carts/{cartId}/items/{itemId}:
    patch:
      tags: [Cart Management]
      summary: Update a cart item
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: itemId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/UpdateCartItemRequest"
      responses:
        "200":
          description: Item updated, updated cart returned
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      tags: [Cart Management]
      summary: Remove an item from the cart
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: itemId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/IdempotencyKey"
      responses:
        "200":
          description: Item removed, updated cart returned
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

  /orders/{orderId}/cancel:
    post:
      tags: [Ordering]
      summary: Request to cancel an order
      description: Cancels an order.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        content:
        application/ocs+json; version=1.0:
          schema:
            type: object
            properties:
              reason: { type: string }
      responses:
        "200":
          description: The cancellation was successful. The updated Order object is returned with status 'cancelled'.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: "#/components/schemas/Order" }
        "403":
          description: The order is not in a state where it can be cancelled.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: "#/components/schemas/Error" }

  /orders:
    get:
      tags: [Ordering]
      summary: List user's orders
      description: Returns a paginated list of orders for the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Cursor"
        - name: status
          in: query
          schema:
            type: string
            enum:
              [pending, confirmed, processing, in_transit, completed, cancelled]
          description: Filter orders by status
      responses:
        "200":
          description: Paginated list of orders
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/OrdersResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      tags: [Ordering]
      summary: Place an order from a cart
      security:
        - bearerAuth: []
      description: This endpoint initiates the order process. It may return a 402 if payment is required.
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
        - name: X-PAYMENT
          in: header
          schema:
            type: string
          description: "Base64-encoded JSON `PaymentPayload`, provided in a retry after a 402 response."
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: |
            The order(s) were successfully created. The response will contain a single Order object by default.
            If the `dev.ocs.order.fulfillment_intent@1.0` capability was used and resulted in multiple fulfillment groups, this response will contain an array of the created Order objects.
          headers:
            X-PAYMENT-RESPONSE:
              schema:
                type: string
              description: Base64-encoded JSON `SettlementResponse` containing payment settlement details.
          application/ocs+json; version=1.0:
            oneOf:
              - $ref: "#/components/schemas/Order"
              - type: array
                items:
                  $ref: "#/components/schemas/Order"
            "400":
              $ref: "#/components/responses/BadRequest"
            "401":
              $ref: "#/components/responses/Unauthorized"
            "402":
              description: Payment is required to proceed. The body contains payment requirements as per the x402 protocol.
              content:
                application/ocs+json; version=1.0:
                schema:
                  $ref: "#/components/schemas/X402PaymentRequiredResponse"
            "403":
              $ref: "#/components/responses/Forbidden"
            "404":
              $ref: "#/components/responses/NotFound"
            "409":
              $ref: "#/components/responses/Conflict"
            "500":
              $ref: "#/components/responses/ServerError"

  /orders/{orderId}:
    get:
      tags: [Ordering]
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/AcceptOCSCapabilities"
      responses:
        "200":
          description: The order object.
          content:
            application/ocs+json; version=1.0:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /orders/{orderId}/updates:
    get:
      tags: [Ordering]
      summary: Subscribe to real-time order updates (SSE)
      security:
        - bearerAuth: []
        - description: |
            Establishes a Server-Sent Events (SSE) connection to receive real-time updates for an order.
            The client should handle a `text/event-stream` response.

            **Events:**
            - `order.patch`: The `data` field will contain a JSON array of patch operations conforming to RFC 6902 (JSON Patch). This event is sent whenever the order object is updated.
              - Patches to the core `/status` field represent changes to the order's programmatic state category.
              - Patches to `/metadata/dev.ocs.order.detailed_status@1.0` represent changes to the rich, human-readable status meant for display.
              - The server will bundle related status changes into a single message to ensure atomic updates.
            - `close`: Indicates the order has reached a terminal state (`completed`, `cancelled`). The server will close the connection after sending this event.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An active SSE stream. The connection will remain open until the order is in a terminal state.
          content:
            text/event-stream:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
          "500":
            $ref: "#/components/responses/ServerError"

  /orders/{orderId}/ratings:
    post:
      tags: [Ordering]
      summary: Submit ratings for a completed order
      description: Allows customers to submit ratings and feedback for a completed order. This action is only available if advertised in the order's `actions` array.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/RatingRequest"
      responses:
        "201":
          description: The ratings were successfully submitted.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: "#/components/schemas/Order" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

  /carts/{cartId}/promotions:
    post:
      tags: [Cart Management]
      summary: Apply or validate a promotion on a cart
      description: Validates and applies a promotion (e.g., promo code, gift card) to the specified cart, updating the cart's totals accordingly.
      security:
        - bearerAuth: []
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/ocs+json; version=1.0:
            schema:
              $ref: "#/components/schemas/PromotionRequest"
      responses:
        "200":
          description: The promotion was successfully applied. The updated Cart object is returned.
          content:
            application/ocs+json; version=1.0:
              schema: { $ref: "#/components/schemas/Cart" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    # --- Discovery Schemas ---
    OCSDiscoveryResponse:
      type: object
      description: |
        RFC 8615-compliant discovery response providing the canonical locations of OCS API resources.
        This is the authoritative source for API endpoint discovery.
      properties:
        ocs:
          type: object
          required:
            - capabilities
            - version
          properties:
            capabilities:
              type: string
              format: uri
              description: "URI of the /capabilities endpoint"
              example: "https://shop.example.com/ocs/capabilities"
            version:
              type: string
              description: "Highest supported OCS core specification version"
              example: "1.0"
            context:
              type: string
              format: uri
              description: "URI of the JSON-LD context document"
              example: "https://schemas.ocs.dev/context.jsonld"
            payment:
              type: string
              format: uri
              description: "URI of the payment or x402 endpoint"
              example: "https://shop.example.com/ocs/payment"

    # --- Capability Discovery Schemas ---
    CapabilitiesResponse:
      type: object
      properties:
        capabilities:
          type: array
          items:
            $ref: "#/components/schemas/Capability"
    Capability:
      type: object
      properties:
        id:
          type: string
          description: "The unique, versioned identifier for the capability."
          example: "dev.ocs.product.variants@1.0"
        schemaUrl:
          type: string
          format: uri
          description: "The URL pointing to the JSON Schema that defines the structure for this capability's metadata."
          example: "https://schemas.ocs.dev/product/variants/v1.json"
        status:
          type: string
          enum: ["beta", "stable", "deprecated"]
          description: |
            Lifecycle status of the capability:
            - **beta**: Experimental, may change without notice. Not recommended for production use.
            - **stable**: Production-ready, follows semantic versioning policy.
            - **deprecated**: Still supported but will be removed. Check 'sunset' field for removal date.
        sunset:
          type: string
          format: date
          description: "ISO 8601 date when a deprecated capability will be removed. Only present if status is 'deprecated'. Servers MUST provide minimum 12 months notice."
          example: "2026-06-01"
        migrationGuide:
          type: string
          format: uri
          description: "URL to documentation explaining how to migrate from this capability version to a newer version. Typically present when status is 'deprecated'."
          example: "https://docs.ocs.dev/migrations/product-variants-v1-to-v2"
        metadata:
          type: object
          description: "Optional metadata providing implementation-specific details for this capability, such as endpoint URLs or configuration options."
        rel:
          type: string
          description: "Link relation type, mirrors HTTP Link rel and Hydra relation."
        href:
          type: string
          format: uri-reference
          description: "Target URI for this capability or linked resource."

    # --- Pagination Schemas ---
    PaginationMeta:
      type: object
      description: Pagination metadata for list responses
      properties:
        limit:
          type: integer
          description: "Number of items requested per page"
        nextCursor:
          type: string
          nullable: true
          description: "Cursor for next page. Null if no more pages."
        previousCursor:
          type: string
          nullable: true
          description: "Cursor for previous page. Null if on first page."
        totalCount:
          type: integer
          description: "Total number of items (optional, may be expensive to compute)"
      required: [limit]

    StoresResponse:
      type: object
      description: Paginated response for GET /stores
      properties:
        stores:
          type: array
          items:
            $ref: "#/components/schemas/Store"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
      required: [stores, pagination]

    CatalogsResponse:
      type: object
      description: Paginated response for GET /catalogs
      properties:
        catalogs:
          type: array
          items:
            $ref: "#/components/schemas/CatalogSummary"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
      required: [catalogs, pagination]

    OrdersResponse:
      type: object
      description: Paginated response for GET /orders
      properties:
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
      required: [orders, pagination]

    # --- OCS Core Schemas ---
    Money:
      type: object
      properties:
        amount:
          {
            type: string,
            description: "Monetary amount as a string.",
            example: "12.99",
          }
        currency:
          {
            type: string,
            description: "ISO 4217 currency code.",
            example: "USD",
          }
      required: [amount, currency]

    Location:
      type: object
      properties:
        address: { type: string }
        latitude: { type: number }
        longitude: { type: number }
      required: [address]

    Store:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        location: { $ref: "#/components/schemas/Location" }
        catalogIds: { type: array, items: { type: string } }
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Each capability
            uses its base ID as a key, with a "_version" field inside.
            Examples:
            - "dev.ocs.restaurant.profile": { "_version": "1.0", ... }
            - "dev.ocs.store.constraints": { "_version": "1.0", ... }
      required: [id, name, location]

    CatalogSummary:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        version:
          { type: string, description: "Version identifier for the catalog." }
      required: [id, name, version]

    Catalog:
      allOf:
        - $ref: "#/components/schemas/CatalogSummary"
        - type: object
          properties:
            items:
              {
                type: array,
                items: { $ref: "#/components/schemas/CatalogItem" },
              }
            metadata:
              type: object
      description: |
        Namespaced key-value pairs. The structure of this object may be defined
        by schemas discoverable at the `/capabilities` endpoint. Each capability
        uses its base ID as a key, with a "_version" field inside.
        Examples:
        - "dev.ocs.promotions.discoverable": { "_version": "1.0", ... }
      required: [items]

    CatalogItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        price: { $ref: "#/components/schemas/Money" }
        available: { type: boolean, default: true }
        fulfillmentType:
          type: string
          enum: [pickup, physical, digital, hybrid]
          description: "The fulfillment method for this item, which dictates the required information for an order."
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Each capability
            uses its base ID as a key, with a "_version" field inside.
             Examples:
             - "dev.ocs.product.variants": { "_version": "1.0", ... }
             - "dev.ocs.product.customization": { "_version": "1.0", ... }
             - "dev.ocs.product.addons": { "_version": "1.0", ... }
             - "dev.ocs.product.physical_properties": { "_version": "1.0", ... }
             - "dev.ocs.order.preorder": { "_version": "1.0", ... }
             - "dev.ocs.service.scheduling": { "_version": "1.0", ... }
        fulfillmentComponents:
          type: array
          description: "For hybrid fulfillment items, specifies the individual components that make up this product."
          items:
            type: object
            properties:
              type:
                type: string
                enum: [physical, digital, pickup]
                description: "The fulfillment type of this component"
              description:
                type: string
                description: "Human-readable description of this component"
              required:
                type: boolean
                description: "Whether this component is required for the order"
            required: [type, description, required]
      required: [id, name, price, available, fulfillmentType]

    CreateCartRequest:
      type: object
      properties:
        storeId: { type: string, format: uuid }
      required: [storeId]

    CartItemRequest:
      type: object
      properties:
        itemId: { type: string }
        quantity: { type: integer, minimum: 1 }
        addOnIds: { type: array, items: { type: string } }
        notes: { type: string }
        customizations:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: "Key-value map of selected customizations, where the key is the group ID and value is the selected option ID(s)."
          example:
            {
              "group_size": "size_large",
              "group_toppings": ["topping_pepperoni", "topping_onions"],
            }
      required: [itemId, quantity]

    UpdateCartItemRequest:
      type: object
      properties:
        quantity: { type: integer, minimum: 1 }
        notes: { type: string, nullable: true }
        addOnIds: { type: array, items: { type: string } }
        customizations:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          description: "Key-value map of selected customizations, where the key is the group ID and value is the selected option ID(s)."

    Cart:
      type: object
      properties:
        id: { type: string, format: uuid }
        items: { type: array, items: { $ref: "#/components/schemas/CartItem" } }
        subtotal: { $ref: "#/components/schemas/Money" }
        tax: { $ref: "#/components/schemas/Money" }
        total: { $ref: "#/components/schemas/Money" }
        stores:
          type: array
          description: "List of stores represented in this cart. Only present if the server supports multi-store carts (dev.ocs.cart.multi_store@1.0 capability)."
          items:
            type: object
            properties:
              storeId: { type: string, format: uuid }
              storeName: { type: string }
              itemCount:
                {
                  type: integer,
                  description: "Number of items from this store in the cart",
                }
              subtotal:
                {
                  $ref: "#/components/schemas/Money",
                  description: "Subtotal for items from this store",
                }
            required: [storeId, itemCount, subtotal]
        guestInfo:
          type: object
          description: "Temporary customer information for guest checkouts. Only present if the server supports dev.ocs.cart.guest@1.0 capability."
          properties:
            email:
              {
                type: string,
                format: email,
                description: "Guest's email address.",
              }
            deliveryAddress:
              {
                $ref: "#/components/schemas/Location",
                description: "Delivery address for the guest.",
              }
            billingAddress:
              {
                $ref: "#/components/schemas/Location",
                description: "Billing address for the guest.",
              }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, items, subtotal, tax, total, createdAt, updatedAt]

    CartItem:
      allOf:
        - $ref: "#/components/schemas/CartItemRequest"
        - type: object
          properties:
            cartItemId:
              {
                type: string,
                format: uuid,
                description: "Unique identifier for this item instance in the cart.",
              }
            price: { $ref: "#/components/schemas/Money" }
            metadata:
              {
                type: object,
                description: "Namespaced key-value pairs. Each capability uses its base ID as a key, with a '_version' field inside.",
              }
          required: [cartItemId, price]

    CreateOrderFromCartRequest:
      type: object
      description: "The standard request to create an order from an existing cart."
      properties:
        orderType:
          type: string
          enum: [from_cart]
          description: "Discriminator field indicating this is a cart-based order."
        cartId: { type: string, format: uuid }
        deliveryAddress:
          $ref: "#/components/schemas/Location"
          description: "A delivery address is required if, and only if, the referenced cart contains at least one item with a fulfillmentType of 'physical' or 'hybrid' (where any component is physical)."
        billingAddress:
          $ref: "#/components/schemas/Location"
          description: "An optional billing address for payment processing. Required if the payment method demands it (discoverable via x402 metadata)."
        consentGiven:
          type: boolean
          description: "Indicates if the user has given consent for data collection/storage, as per dev.ocs.store.policies@1.0 dataPolicy."
        notes: { type: string }
        metadata: { type: object }
      required: [orderType, cartId]

    CreateDirectOrderRequest:
      type: object
      description: "The request to create an order directly from a list of items, bypassing the cart. Only available if the server advertises the dev.ocs.order.direct@1.0 capability."
      properties:
        orderType:
          type: string
          enum: [direct]
          description: "Discriminator field indicating this is a direct order."
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItemRequest"
          description: "The list of items to order."
        deliveryAddress:
          $ref: "#/components/schemas/Location"
          description: "A delivery address is required if any item has a fulfillmentType of 'physical' or 'hybrid' (where any component is physical)."
        billingAddress:
          $ref: "#/components/schemas/Location"
          description: "An optional billing address for payment processing. Required if the payment method demands it (discoverable via x402 metadata)."
        consentGiven:
          type: boolean
          description: "Indicates if the user has given consent for data collection/storage, as per dev.ocs.store.policies@1.0 dataPolicy."
        notes: { type: string }
        promotionCode:
          {
            type: string,
            description: "Optional promotion code to apply to the order.",
          }
        metadata: { type: object }
      required: [orderType, items]

    CreateOrderRequest:
      oneOf:
        from_cart: "#/components/schemas/CreateOrderFromCartRequest"
        direct: "#/components/schemas/CreateDirectOrderRequest"
    PromotionRequest:
      type: object
      description: A request to apply or validate a promotion on a cart.
      properties:
        type:
          type: string
          enum: [promo_code, gift_card, loyalty_points]
          description: "The type of promotion being applied."
        value:
          description: "The value for the promotion (e.g., the code 'SUMMER10')."
        required: [type, value]
    RatingRequest:
      type: object
      description: A request to submit ratings for a completed order.
      properties:
        food:
          type: integer
          minimum: 1
          maximum: 5
          description: "Rating for the food quality (1-5 stars)."
        delivery:
          type: integer
          minimum: 1
          maximum: 5
          description: "Rating for the delivery service (1-5 stars)."
        restaurant:
          type: integer
          minimum: 1
          maximum: 5
          description: "Overall rating for the restaurant (1-5 stars)."
        comment:
          type: string
          description: "Optional text comment from the customer."
    ValidationIssue:
      type: object
      description: "Details a failed validation rule on a specific field."
      properties:
        type: { type: string, enum: ["validation"] }
        field:
          {
            type: string,
            description: "A JSON Pointer to the invalid field in the request body.",
          }
        value:
          { description: "The invalid value that was provided by the client." }
        reason:
          {
            type: string,
            description: "A description of the validation rule that failed (e.g., 'String must be a valid UUID').",
          }
        required: [type, field, reason]
    BusinessLogicIssue:
      type: object
      description: "Details a failed business rule involving one or more resources."
      properties:
        type: { type: string, enum: ["business_logic"] }
        resourceId:
          {
            type: string,
            description: "The ID of the resource that caused the issue (e.g., an out-of-stock itemId).",
          }
        reason:
          {
            type: string,
            description: "A description of the business rule that was violated (e.g., 'The requested item has 0 stock remaining').",
          }
      required: [type, resourceId, reason]

    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        status:
          type: string
          description: |
            A required, standardized status code representing the programmatic state category of the order.
            This is intended for client-side logic (e.g., state machines), NOT for direct display to the user.
            For rich, human-readable status, clients should check for the 'dev.ocs.order.detailed_status@1.0' capability.
          enum:
            - pending # Order created, but not yet confirmed by the system (e.g., awaiting inventory check).
            - confirmed # The order is accepted and will be processed.
          actions:
            type: array
            description: |
              A list of actions the client can perform on this order in its current state.
              The presence of an action indicates the user should be shown the corresponding UI control.

              If the server advertises dev.ocs.hypermedia.schema_aware_actions@1.0 capability,
              actions will include schema references for request/response validation and dynamic form generation.
            items:
              $ref: "#/components/schemas/Action"
          returns:
            type: array
            description: "A list of summaries for any returns associated with this order."
            items:
              $ref: "#/components/schemas/ReturnSummary"
        items: { type: array, items: { $ref: "#/components/schemas/CartItem" } }
        total: { $ref: "#/components/schemas/Money" }
        deliveryAddress: { $ref: "#/components/schemas/Location" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        metadata:
          type: object
          description: |
            Namespaced key-value pairs. The structure of this object may be defined
            by schemas discoverable at the `/capabilities` endpoint. Each capability
            uses its base ID as a key, with a "_version" field inside.
             Examples:
             - "dev.ocs.order.shipment_tracking": { "_version": "1.0", ... }
             - "dev.ocs.order.kitchen_status": { "_version": "1.0", ... }
             - "dev.ocs.order.delivery_tracking": { "_version": "1.0", ... }
             - "dev.ocs.order.tipping": { "_version": "1.0", ... }
             - "dev.ocs.order.digital_access": { "_version": "1.0", ... }
             - "dev.ocs.order.detailed_status": { "_version": "1.0", ... }
              - "dev.ocs.order.subscription": { "_version": "1.0", ... }
          required: [id, status, items, total, createdAt, updatedAt]

    InitiateReturnRequest:
      type: object
      description: "The request body for initiating a return for items from an order."
      properties:
        items:
          type: array
          description: "The list of items and quantities to be returned."
          items:
            type: object
            properties:
              cartItemId:
                {
                  type: string,
                  description: "The ID of the item from the original order.",
                }
              quantity: { type: integer, minimum: 1 }
            required: [cartItemId, quantity]
          reason:
            {
              type: string,
              description: "The user-provided reason for the return.",
            }
          required: [items, reason]

    ReturnSummary:
      type: object
      description: "A summary of a return, intended for embedding in the Order object."
      properties:
        id:
          {
            type: string,
            format: "uuid",
            description: "The unique ID of the return.",
          }
        status:
          {
            type: string,
            enum:
              [
                "requested",
                "approved",
                "rejected",
                "in_transit",
                "received",
                "processed",
                "completed",
              ],
          }
        href:
          {
            type: string,
            format: "uri",
            description: "The URL to fetch the full Return object.",
          }
        required: [id, status, href]
    Return:
      type: object
      description: "The full Return object, representing the complete state of a return workflow."
      properties:
        id: { type: string, format: "uuid" }
        orderHref:
          {
            type: string,
            format: "uri",
            description: "A link back to the original Order.",
          }
        status:
          {
            type: string,
            enum:
              [
                "requested",
                "approved",
                "rejected",
                "in_transit",
                "received",
                "processed",
                "completed",
              ],
          }
        items:
          type: array
          items:
            type: object
            properties:
              cartItemId:
                {
                  type: string,
                  description: "The ID of the item from the original order.",
                }
              quantity: { type: integer }
        reason: { type: string }
        returnLabelUrl:
          {
            type: string,
            format: "uri",
            description: "A URL to a printable shipping label.",
          }
        createdAt: { type: string, format: "date-time" }
        updatedAt: { type: string, format: "date-time" }
        required: [id, orderHref, status, items, createdAt, updatedAt]
    JsonPatchOperation:
      type: object
      description: "A single JSON Patch operation, as defined by RFC 6902."
      required: [op, path]
      properties:
        op: { type: string, enum: [add, remove, replace, move, copy, test] }
        path: { type: string, description: "A JSON Pointer path." }
        value: { description: "The value for the operation." }
        from:
          {
            type: string,
            description: "A JSON Pointer path. Used in 'move' and 'copy' ops.",
          }

    # --- X402 Protocol Schemas ---
    X402PaymentRequiredResponse:
      type: object
      description: "The response body for a 402 Payment Required status. See x402 spec section 5.1."
      properties:
        x402Version:
          { type: number, description: "Protocol version identifier." }
        error:
          {
            type: string,
            description: "Human-readable error message explaining why payment is required.",
          }
        accepts:
          {
            type: array,
            items: { $ref: "#/components/schemas/X402PaymentRequirements" },
          }
      required: [x402Version, error, accepts]

    X402PaymentRequirements:
      type: object
      description: "Details a single payment method accepted by the server. See x402 spec section 5.1.2."
      properties:
        scheme: { type: string, example: "exact" }
        network: { type: string, example: "base-sepolia" }
        maxAmountRequired: { type: string, example: "10000" }
        asset: { type: string }
        payTo: { type: string }
        resource: { type: string, format: uri }
        description: { type: string }
        mimeType: { type: string, example: "application/json" }
        outputSchema: { type: object }
        maxTimeoutSeconds: { type: number }
        extra: { type: object }
        interledger:
          type: object
          description: "Optional Interledger/Open Payments compatible metadata for multi-rail payment interoperability."
          properties:
            incoming_payment:
              type: string
              format: uri
              description: "Open Payments incoming-payment endpoint URL."
            asset_code:
              type: string
              description: "ISO 4217 currency code or token symbol (e.g., 'USD', 'EUR', 'USDC')."
            asset_scale:
              type: integer
              description: "Number of decimal places for the asset (e.g., 2 for USD, 6 for USDC)."
      required:
        [
          scheme,
          network,
          maxAmountRequired,
          asset,
          payTo,
          resource,
          description,
          maxTimeoutSeconds,
        ]

    X402PaymentPayload:
      type: object
      description: "The JSON payload sent in the X-PAYMENT header (base64-encoded). See x402 spec section 5.2."
      properties:
        x402Version: { type: number, example: 1 }
        scheme: { type: string, example: "exact" }
        network: { type: string, example: "base-sepolia" }
        payload:
          { oneOf: [{ $ref: "#/components/schemas/X402ExactSchemePayload" }] }
      required: [x402Version, scheme, network, payload]

    X402ExactSchemePayload:
      type: object
      description: "The payload for the 'exact' payment scheme. See x402 spec section 5.2.2."
      properties:
        signature: { type: string }
        authorization: { $ref: "#/components/schemas/X402Authorization" }
      required: [signature, authorization]

    X402Authorization:
      type: object
      description: "EIP-3009 authorization parameters. See x402 spec section 5.2.2."
      properties:
        from: { type: string }
        to: { type: string }
        value: { type: string }
        validAfter: { type: string }
        validBefore: { type: string }
        nonce: { type: string }
      required: [from, to, value, validAfter, validBefore, nonce]

    X402SettlementResponse:
      type: object
      description: "The JSON payload in the X-PAYMENT-RESPONSE header (base64-encoded). See x402 spec section 5.3."
      properties:
        success: { type: boolean }
        errorReason: { type: string }
        transaction: { type: string }
        network: { type: string }
        payer: { type: string }
      required: [success, transaction, network, payer]

    # --- Hypermedia Schemas ---
    Action:
      type: object
      description: |
        Represents a hypermedia action that can be performed on a resource.
        When dev.ocs.hypermedia.schema_aware_actions@1.0 is enabled, includes schema references
        for request/response validation and dynamic client generation.
      properties:
        id:
          type: string
          description: "Unique identifier for this action type"
          enum:
            [
              "cancel",
              "initiate_return",
              "add_rating",
              "pause_subscription",
              "resume_subscription",
              "cancel_subscription",
              "track",
              "retry_payment",
              "update_shipping",
              "add_tip",
            ]
        href:
          type: string
          format: uri
          description: "The API endpoint to call to perform this action"
        method:
          type: string
          enum: ["GET", "POST", "PUT", "PATCH", "DELETE"]
          default: "POST"
          description: "HTTP method to use for this action"
        rel:
          type: string
          description: "Link relation type, mirrors HTTP Link rel and Hydra relation"
        title:
          type: string
          description: "Human-readable action name for UI display. Only present if schema-aware actions enabled."
        description:
          type: string
          description: "Detailed explanation of what this action does. Only present if schema-aware actions enabled."
        requestSchema:
          $ref: "#/components/schemas/SchemaReference"
        responseSchema:
          $ref: "#/components/schemas/SchemaReference"
        errorSchemas:
          type: array
          description: |
            Possible error responses for this action. All errors follow the OCS Error structure
            with code, message, userMessage, and nextActions fields.
          items:
            type: object
            properties:
              statusCode:
                type: integer
                description: "HTTP status code for this error"
                example: 400
              errorCodes:
                type: array
                description: "Specific OCS error codes that may be returned (from Error.code enum)"
                items:
                  type: string
                example:
                  ["cancellation_window_expired", "order_already_cancelled"]
              description:
                type: string
                description: "Human-readable explanation of when this error occurs"
                example: "Returned when the order cannot be cancelled because the cancellation window has expired or the order is already fulfilled"
              schema:
                description: "Schema for this error response. Typically references the standard OCS Error schema."
                oneOf:
                  - type: object
                    properties:
                      $ref:
                        type: string
                        const: "#/components/schemas/Error"
                  - $ref: "#/components/schemas/SchemaReference"
            required: [statusCode, errorCodes]
        parameters:
          type: array
          description: "URL/query/header parameters for this action"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Parameter name"
              in:
                type: string
                enum: ["path", "query", "header"]
                description: "Where this parameter is located"
              required:
                type: boolean
                default: false
                description: "Whether this parameter is required"
              schema:
                type: object
                description: "JSON Schema for this parameter"
            required: [name, in, schema]
        examples:
          type: object
          description: "Example request and response payloads"
          properties:
            request:
              type: object
              description: "Example request body"
            response:
              type: object
              description: "Example response body"
      required: [id, href]
      example:
        id: "cancel"
        href: "/orders/order_123/cancel"
        method: "POST"
        title: "Cancel Order"
        description: "Cancel this order if it hasn't been fulfilled yet. Refunds will be processed within 5-7 business days."
        requestSchema:
          $ref: "https://schemas.ocs.dev/order/actions/cancel_request/v1.json"
        responseSchema:
          $ref: "https://schemas.ocs.dev/order/v1.json"
        errorSchemas:
          - statusCode: 400
            errorCodes:
              ["cancellation_window_expired", "order_already_cancelled"]
            description: "Order cannot be cancelled (window expired or already cancelled)"
            schema:
              $ref: "#/components/schemas/Error"
          - statusCode: 404
            errorCodes: ["not_found"]
            description: "Order not found"
            schema:
              $ref: "#/components/schemas/Error"
        examples:
          request:
            reason: "Changed my mind"
          response:
            id: "order_123"
            status: "cancelled"
            refundStatus: "processing"

    SchemaReference:
      type: object
      description: |
        Reference to a JSON Schema, either by URL or inline.
        Inline schemas are preferred for small, simple schemas to reduce HTTP requests.
      properties:
        $ref:
          type: string
          format: uri
          description: "URL to a JSON Schema document"
        inline:
          type: object
          description: "Inline JSON Schema definition"
      oneOf:
        - required: [$ref]
        - required: [inline]
      example:
        $ref: "https://schemas.ocs.dev/order/actions/cancel_request/v1.json"

    # --- Web Payments & SPC Schemas ---
    WebPaymentsMetadata:
      type: object
      description: |
        Metadata for the dev.ocs.payment.web_payments@1.0 capability, enabling W3C Payment Request API integration.
        This capability allows servers to advertise support for native browser payment UIs with saved payment methods.
        See: https://www.w3.org/TR/payment-request/
      properties:
        _version:
          type: string
          const: "1.0"
          description: "Schema version for this capability metadata."
        supportedMethods:
          type: array
          items:
            type: string
            examples:
              [
                "basic-card",
                "https://apple.com/apple-pay",
                "https://google.com/pay",
              ]
          minItems: 1
          description: "W3C payment method identifiers supported by this server."
        merchantIdentifier:
          type: string
          description: "Merchant identifier required for payment methods like Apple Pay."
        merchantName:
          type: string
          description: "Display name shown in the payment UI."
        supportedNetworks:
          type: array
          items:
            type: string
            enum:
              [visa, mastercard, amex, discover, jcb, diners, maestro, unionpay]
          description: "For basic-card: which card networks are accepted."
        requireShippingAddress:
          type: boolean
          default: false
          description: "Whether the Payment Request should collect shipping address."
        requireBillingAddress:
          type: boolean
          default: false
          description: "Whether billing address is required."
      required: ["_version", "supportedMethods"]
      example:
        _version: "1.0"
        supportedMethods: ["basic-card", "https://google.com/pay"]
        merchantName: "Example Shop"
        supportedNetworks: ["visa", "mastercard", "amex"]

    SecurePaymentConfirmationMetadata:
      type: object
      description: |
        Metadata for the dev.ocs.payment.spc@1.0 capability, enabling W3C Secure Payment Confirmation integration.
        SPC provides biometric authentication for payments using WebAuthn, reducing fraud and improving UX.
        See: https://www.w3.org/TR/secure-payment-confirmation/
      properties:
        _version:
          type: string
          const: "1.0"
          description: "Schema version for this capability metadata."
        supportedRps:
          type: array
          items:
            type: string
            format: hostname
            examples: ["bank.example.com", "issuer.example.org"]
          minItems: 1
          description: "List of Relying Party domains coordinated for SPC authentication (typically banks/issuers)."
        registrationUrl:
          type: string
          format: uri
          description: "URL for RP credential registration, typically loaded in an iframe."
        registrationFlow:
          type: string
          enum: [iframe, redirect, popup]
          default: iframe
          description: "How the registration flow should be presented to users."
        timeout:
          type: integer
          minimum: 30000
          maximum: 600000
          default: 300000
          description: "Timeout in milliseconds for SPC authentication prompts (30s-10min)."
        requiresEnrollment:
          type: boolean
          default: true
          description: "Whether users must enroll with the RP before using SPC."
        fallbackMethods:
          type: array
          items:
            type: string
            enum: [otp, password, web_payments, manual_entry]
          description: "Alternative authentication methods if SPC is unavailable."
      required: ["_version", "supportedRps"]
      example:
        _version: "1.0"
        supportedRps: ["bank.example.com"]
        registrationUrl: "https://bank.example.com/register-spc"
        timeout: 300000
        fallbackMethods: ["otp", "web_payments"]

    WebPaymentsExtras:
      type: object
      description: |
        Additional data included in the x402 'extra' field when Web Payments capability is supported.
        Provides information needed by the client to construct a PaymentRequest.
      properties:
        supportedMethods:
          type: array
          items:
            type: object
            properties:
              supportedMethods:
                type: string
                description: "Payment method identifier"
              data:
                type: object
                description: "Payment method specific data"
          description: "Array of payment method objects for PaymentRequest constructor"
        displayItems:
          type: array
          items:
            type: object
            properties:
              label: { type: string }
              amount: { type: object }
          description: "Optional line items to display in the payment sheet"
      example:
        supportedMethods:
          - supportedMethods: "basic-card"
            data:
              supportedNetworks: ["visa", "mastercard"]
        displayItems:
          - label: "Subtotal"
            amount: { currency: "USD", value: "20.00" }

    SPCExtras:
      type: object
      description: |
        Additional data included in the x402 'extra' field when SPC capability is supported.
        Provides challenge and credential information for SecurePaymentConfirmationRequest.
      properties:
        challenge:
          type: string
          format: byte
          description: "Base64-encoded cryptographic challenge for this transaction"
        credentialIds:
          type: array
          items:
            type: string
            format: byte
          description: "Base64-encoded credential IDs available for this user"
        rpId:
          type: string
          format: hostname
          description: "Relying Party identifier"
        instrument:
          type: object
          properties:
            displayName: { type: string }
            icon: { type: string, format: uri }
          description: "Payment instrument details to display during authentication"
      required: ["challenge", "credentialIds", "rpId", "instrument"]
      example:
        challenge: "dGhpc19pc19hX2NoYWxsZW5nZQ=="
        credentialIds: ["Y3JlZGVudGlhbF9pZF8x"]
        rpId: "bank.example.com"
        instrument:
          displayName: "Visa ****1234"
          icon: "https://bank.example.com/card-icon.png"

    Error:
      type: object
      description: |
        RFC 9457-compliant problem detail object for structured error responses.

        See `x-error-catalog` in components for comprehensive specifications of all error codes, including HTTP status codes, retry strategies, common causes, and suggested recovery actions.
      properties:
        type:
          type: string
          format: uri
          description: "URI reference identifying the problem type."
        title:
          type: string
          description: "Short, human-readable summary of the problem."
        status:
          type: integer
          description: "HTTP status code for this occurrence."
        detail:
          type: string
          description: "Human-readable explanation specific to this occurrence."
        instance:
          type: string
          format: uri
          description: "URI reference identifying the specific occurrence (optional)."
        timestamp:
          type: string
          format: date-time
          description: "Timestamp when the error occurred (optional)."
        localizationKey:
          type: string
          description: "I18n key for localized user messages (extension)."
        nextActions:
          type: array
          description: "Suggested recovery actions (extension)."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Programmatic identifier for the action."
              href:
                type: string
                format: uri
                description: "Endpoint to call for this action."
              method:
                type: string
                enum: [GET, POST, PATCH, DELETE]
                description: "HTTP method for the action."
              title:
                type: string
                description: "Human-readable title for the action."
              requestSchema:
                type: object
                description: "JSON Schema for the request body (if applicable)."
              responseSchema:
                type: object
                description: "JSON Schema for the expected response."
            required: [id, href, method]
      required: [type, title]

  # --- Error Catalog ---
  # Machine-readable error specifications providing detailed context for every error code.
  # Each entry defines HTTP status, retry behavior, common causes, and suggested recovery actions.
  x-error-catalog:
    # --- General Errors ---
    bad_request:
      httpStatus: 400
      title: "Bad Request"
      description: "The request was malformed or contains invalid data."
      category: "client_error"
      retryable: false

    unauthorized:
      httpStatus: 401
      title: "Unauthorized"
      description: "Authentication credentials are required or invalid."
      category: "authentication"
      retryable: true
      retryStrategy: "Obtain valid authentication token and retry"

    forbidden:
      httpStatus: 403
      title: "Forbidden"
      description: "The authenticated user does not have permission to perform this action."
      category: "authorization"
      retryable: false

    not_found:
      httpStatus: 404
      title: "Not Found"
      description: "The requested resource does not exist."
      category: "client_error"
      retryable: false

    conflict:
      httpStatus: 409
      title: "Conflict"
      description: "The request conflicts with the current state of the server."
      category: "client_error"
      retryable: false

    server_error:
      httpStatus: 500
      title: "Internal Server Error"
      description: "An unexpected error occurred on the server."
      category: "server_error"
      retryable: true
      retryStrategy: "Wait and retry with exponential backoff"

    # --- Idempotency Errors ---
    idempotency_key_reused:
      httpStatus: 409
      title: "Idempotency Key Reused"
      description: "The provided Idempotency-Key was already used with a different request body."
      category: "client_error"
      retryable: false
      possibleCauses:
        - "The same idempotency key was sent with different request parameters"
        - "Client retry logic is not preserving the original request body"
      suggestedActions:
        - action: "generate_new_key"
          description: "Generate a new UUIDv4 and retry with the correct request body"

    # --- Cart Errors ---
    cart_not_found:
      httpStatus: 404
      title: "Cart Not Found"
      description: "The requested cartId does not exist or has already been converted to an order."
      category: "resource_not_found"
      retryable: false
      possibleCauses:
        - "Cart was already submitted as an order"
        - "CartId is invalid or malformed"
        - "Cart belongs to a different user"
      suggestedActions:
        - action: "create_new_cart"
          method: "POST"
          endpoint: "/carts"
          description: "Create a new cart"
        - action: "check_orders"
          method: "GET"
          endpoint: "/orders"
          description: "Check if cart was already converted to order"
      relatedCapabilities: ["dev.ocs.cart"]

    cart_expired:
      httpStatus: 410
      title: "Cart Expired"
      description: "The cart existed but was deleted due to inactivity per the server's lifetimeSeconds policy."
      category: "gone"
      retryable: false
      possibleCauses:
        - "Cart exceeded the configured lifetime without updates"
        - "Server restarted and non-persistent carts were cleared"
      suggestedActions:
        - action: "recreate_cart"
          method: "POST"
          endpoint: "/carts"
          description: "Create a new cart with the same items"
      relatedCapabilities: ["dev.ocs.cart"]
      metadataKeys:
        - "Check dev.ocs.cart capability metadata.lifetimeSeconds for expiration policy"

    cart_already_submitted:
      httpStatus: 409
      title: "Cart Already Submitted"
      description: "This cart has already been successfully converted to an order."
      category: "conflict"
      retryable: false
      possibleCauses:
        - "Duplicate order submission (e.g., double-click)"
        - "Retry without proper idempotency key"
      suggestedActions:
        - action: "get_order"
          method: "GET"
          endpoint: "/orders"
          description: "Retrieve the existing order"
      relatedCapabilities: ["dev.ocs.cart"]

    cart_empty:
      httpStatus: 400
      title: "Cart Empty"
      description: "Cannot create an order from an empty cart."
      category: "validation"
      retryable: true
      retryStrategy: "Add items to cart before creating order"
      suggestedActions:
        - action: "add_items"
          method: "POST"
          endpoint: "/carts/{cartId}/items"
          description: "Add items to the cart"
      relatedCapabilities: ["dev.ocs.cart"]

    cart_multi_store_limit_exceeded:
      httpStatus: 400
      title: "Multi-Store Cart Limit Exceeded"
      description: "Cannot add items from different stores to the same cart, or the maximum number of stores per cart has been exceeded."
      category: "business_logic"
      retryable: false
      possibleCauses:
        - "Attempting to add items from a different store than the cart's initial store"
        - "Server does not support multi-store carts"
        - "Multi-store cart limit has been reached"
      suggestedActions:
        - action: "create_separate_cart"
          method: "POST"
          endpoint: "/carts"
          description: "Create a separate cart for items from the other store"
      relatedCapabilities: ["dev.ocs.cart", "dev.ocs.cart.multi_store"]
      metadataKeys:
        - "Check dev.ocs.cart.multi_store capability for multi-store cart policies"

    # --- Product Errors ---
    product_unavailable:
      httpStatus: 409
      title: "Product Unavailable"
      description: "The requested product is not currently available for purchase."
      category: "business_logic"
      retryable: true
      retryStrategy: "Check product availability and retry later"
      possibleCauses:
        - "Product is out of stock"
        - "Product has been discontinued"
        - "Product is not available in customer's region"

    product_customization_invalid:
      httpStatus: 400
      title: "Invalid Product Customization"
      description: "The provided product customization is invalid or incomplete."
      category: "validation"
      retryable: true
      retryStrategy: "Correct customization parameters and retry"
      relatedCapabilities: ["dev.ocs.product.customization"]

    # --- Promotion Errors ---
    promotion_invalid:
      httpStatus: 400
      title: "Invalid Promotion"
      description: "The provided promotion code is not valid."
      category: "validation"
      retryable: false

    promotion_expired:
      httpStatus: 400
      title: "Promotion Expired"
      description: "The promotion code has expired and is no longer valid."
      category: "business_logic"
      retryable: false

    promotion_not_applicable:
      httpStatus: 409
      title: "Promotion Not Applicable"
      description: "The promotion code cannot be applied to this cart or order."
      category: "business_logic"
      retryable: false
      possibleCauses:
        - "Cart total does not meet minimum requirements"
        - "Cart does not contain eligible items"
        - "Customer is not in eligible group"

    promotion_stacking_not_allowed:
      httpStatus: 409
      title: "Promotion Stacking Not Allowed"
      description: "This promotion cannot be combined with other promotions already applied."
      category: "business_logic"
      retryable: false
      relatedCapabilities: ["dev.ocs.promotions.policies"]

    # --- Fulfillment Errors ---
    delivery_address_required:
      httpStatus: 400
      title: "Delivery Address Required"
      description: "A delivery address is required because the order contains physical items."
      category: "validation"
      retryable: true
      retryStrategy: "Provide a valid delivery address"

    delivery_address_invalid:
      httpStatus: 400
      title: "Invalid Delivery Address"
      description: "The provided delivery address is invalid or cannot be serviced."
      category: "validation"
      retryable: true
      retryStrategy: "Provide a valid, serviceable delivery address"

    fulfillment_intent_incomplete:
      httpStatus: 400
      title: "Incomplete Fulfillment Intent"
      description: "The fulfillment intent is missing required information or contains invalid data."
      category: "validation"
      retryable: true
      retryStrategy: "Complete all required fulfillment details"
      relatedCapabilities: ["dev.ocs.order.fulfillment_intent"]

    fulfillment_intent_duplicate_item:
      httpStatus: 400
      title: "Duplicate Item in Fulfillment Intent"
      description: "The same cart item appears in multiple fulfillment groups."
      category: "validation"
      retryable: true
      retryStrategy: "Ensure each cart item appears in exactly one fulfillment group"
      relatedCapabilities: ["dev.ocs.order.fulfillment_intent"]

    fulfillment_method_invalid:
      httpStatus: 400
      title: "Invalid Fulfillment Method"
      description: "The requested fulfillment method is not supported for this item or location."
      category: "validation"
      retryable: true
      retryStrategy: "Choose a valid fulfillment method"

    order_request_invalid:
      httpStatus: 400
      title: "Invalid Order Request"
      description: "The order request is invalid. Exactly one of 'cartId' or 'items' must be provided, not both or neither."
      category: "validation"
      retryable: true
      retryStrategy: "Provide either cartId (for cart-based orders) OR items (for direct orders), but not both"
      possibleCauses:
        - "Both cartId and items were provided in the request"
        - "Neither cartId nor items were provided"
        - "orderType field is missing or invalid"
      suggestedActions:
        - action: "use_cart_order"
          description: "For cart-based orders, provide orderType='from_cart' and cartId only"
        - action: "use_direct_order"
          description: "For direct orders, provide orderType='direct' and items only"
      relatedCapabilities: ["dev.ocs.cart", "dev.ocs.order.direct"]

    # --- Payment Errors ---
    payment_failed:
      httpStatus: 402
      title: "Payment Failed"
      description: "The payment could not be processed."
      category: "payment"
      retryable: true
      retryStrategy: "Try a different payment method or contact payment provider"
      possibleCauses:
        - "Insufficient funds"
        - "Payment method declined"
        - "Payment authorization expired"
        - "Network error during payment processing"

    # --- Cancellation & Returns Errors ---
    cancellation_window_expired:
      httpStatus: 403
      title: "Cancellation Window Expired"
      description: "The order can no longer be cancelled because it has progressed beyond the cancellation window."
      category: "business_logic"
      retryable: false
      relatedCapabilities: ["dev.ocs.order.cancellation"]

    return_policy_violated:
      httpStatus: 403
      title: "Return Policy Violated"
      description: "The return request does not comply with the server's return policy."
      category: "business_logic"
      retryable: false
      possibleCauses:
        - "Return window has expired"
        - "Item is not eligible for return"
        - "Item condition does not meet return requirements"
      relatedCapabilities: ["dev.ocs.order.returns"]

    # --- Rate Limiting Errors ---
    rate_limit_exceeded:
      httpStatus: 429
      title: "Rate Limit Exceeded"
      description: "Too many requests have been made. Please slow down and retry after the specified time."
      category: "rate_limiting"
      retryable: true
      retryStrategy: "Wait for the duration specified in the Retry-After header before retrying."
      possibleCauses:
        - "Making too many requests in a short period."
        - "Exceeded per-minute or per-hour rate limits."
        - "Burst limit exceeded."
      headers:
        Retry-After:
          schema: { type: integer }
          description: "Number of seconds to wait before retrying."
        X-RateLimit-Limit:
          schema: { type: integer }
          description: "Maximum requests allowed in the current window."
        X-RateLimit-Remaining:
          schema: { type: integer }
          description: "Requests remaining in the current window (will be 0)."
        X-RateLimit-Reset:
          schema: { type: integer }
          description: "Unix timestamp when the rate limit resets."
      relatedCapabilities:
        - "dev.ocs.server.rate_limits"
      metadataKeys:
        - "Check dev.ocs.server.rate_limits capability for rate limit policies."

    order_items_unavailable:
      httpStatus: 409
      title: "Order Items Unavailable"
      description: "One or more items in the cart/order are no longer available for purchase."
      category: "business_logic"
      retryable: true
      retryStrategy: "Remove unavailable items and retry."
      possibleCauses:
        - "Items went out of stock after being added to cart."
        - "Items were discontinued."
        - "Inventory levels changed."
      suggestedActions:
        - action: "review_cart"
          method: "GET"
          endpoint: "/carts/{cartId}"
          description: "Review cart contents and remove unavailable items."
        - action: "update_quantities"
          method: "PATCH"
          endpoint: "/carts/{cartId}/items/{itemId}"
          description: "Reduce quantities of partially available items."
      relatedCapabilities:
        - "dev.ocs.cart"
      details:
        type: array
        description: "List of unavailable items with specific reasons."
        items:
          type: object
          properties:
            itemId:
              type: string
              description: "ID of the unavailable item."
            reason:
              type: string
              description: "Human-readable reason why the item is unavailable."
            availableQuantity:
              type: integer
              description: "How many units are actually available (0 if completely unavailable)."
          required:
            - itemId
            - reason

      insufficient_stock:
        httpStatus: 409
        title: "Insufficient Stock"
        description: "The requested quantity exceeds available inventory."
        category: "business_logic"
        retryable: true
        retryStrategy: "Reduce quantity or try again later"
        possibleCauses:
          - "Requested quantity is higher than current stock level"
          - "Stock was reduced by another customer's order"
        suggestedActions:
          - action: "reduce_quantity"
            method: "PATCH"
            endpoint: "/carts/{cartId}/items/{itemId}"
            description: "Reduce the quantity to match available stock"
          - action: "check_availability"
            method: "GET"
            endpoint: "/catalogs/{catalogId}/items/{itemId}"
            description: "Check current stock levels"

      invalid_quantity:
        httpStatus: 400
        title: "Invalid Quantity"
        description: "The requested quantity is invalid (negative, zero, or exceeds maximum allowed)."
        category: "validation"
        retryable: true
        retryStrategy: "Provide a valid quantity"
        possibleCauses:
          - "Quantity is negative or zero"
          - "Quantity exceeds per-customer limits"
          - "Quantity exceeds per-order limits"

      geographic_restriction:
        httpStatus: 403
        title: "Geographic Restriction"
        description: "This item is not available for delivery/shipping to the specified location."
        category: "business_logic"
        retryable: false
        possibleCauses:
          - "Item shipping restrictions"
          - "Legal/regulatory restrictions"
          - "Vendor geographic limitations"

      minimum_order_value:
        httpStatus: 400
        title: "Minimum Order Value Not Met"
        description: "The order total does not meet the minimum required value."
        category: "business_logic"
        retryable: true
        retryStrategy: "Add more items to meet minimum order value"
        possibleCauses:
          - "Order subtotal is below minimum threshold"
          - "After discounts, order value is too low"
        suggestedActions:
          - action: "add_more_items"
            method: "POST"
            endpoint: "/carts/{cartId}/items"
            description: "Add additional items to increase order value"

      service_unavailable:
        httpStatus: 503
        title: "Service Temporarily Unavailable"
        description: "The service is temporarily unavailable due to maintenance or high load."
        category: "server_error"
        retryable: true
        retryStrategy: "Wait and retry with exponential backoff"
        headers:
          Retry-After:
            schema: { type: integer }
            description: "Suggested wait time in seconds"

      payment_method_unsupported:
        httpStatus: 400
        title: "Payment Method Not Supported"
        description: "The selected payment method is not supported for this order."
        category: "payment"
        retryable: true
        retryStrategy: "Choose a different payment method"
        possibleCauses:
          - "Payment method not accepted by merchant"
          - "Payment method not available in customer's region"
          - "Payment method requires additional verification"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter the Bearer token. The specific method of acquiring the token (e.g., API Key, OAuth2, SIWE) is determined by the server implementation and may be discoverable via the /capabilities endpoint."

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema: { type: string, format: uuid }
      description: |
        A unique key to prevent duplicate requests. Required for all state-changing operations (POST, PATCH, DELETE).

        **Behavior**:
        - Server MUST store the key and response for at least 24 hours
        - Replaying the same key with identical request returns the cached response
        - Replaying the same key with different request returns 409 Conflict with code "idempotency_key_reused"

        **Best Practice**: Use UUIDv4 generated client-side for each logical operation.

         **Example**: `550e8400-e29b-41d4-a716-446655440000`
    AcceptLanguage:
      name: Accept-Language
      in: header
      required: false
      schema: { type: string }
      description: |
        Specifies the client's preferred language(s) for localized content. Follows RFC 7231 Accept-Language format.

        **Behavior**:
        - Server should use this to select appropriate locale for translated content
        - If server supports dev.ocs.i18n@1.0, it must negotiate locale from supportedLocales
        - If not supported or no match found, server uses defaultLocale
        - Server must respond with Content-Language header indicating selected locale

        **Examples**:
        - `en-US` (single language)
        - `fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5` (weighted preferences)
    ContentLanguage:
      name: Content-Language
      in: header
      required: false
      schema: { type: string }
      description: |
        Indicates the language of the response content. Set by server when responding with localized content.

        **Behavior**:
        - Must be included when response contains translated strings
        - Should match one of the supportedLocales from dev.ocs.i18n@1.0 capability
        - Clients should use this to determine text direction and formatting

        **Example**: `fr-FR`
    Limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      description: The maximum number of results to return.
    Cursor:
      name: cursor
      in: query
      schema: { type: string }
      description: The cursor for the next page of results.
    AcceptOCSCapabilities:
      name: Accept-OCS-Capabilities
      in: header
      required: false
      schema: { type: string }
      description: |
        Comma-separated list of capability IDs with versions that the client prefers.

        **Format**: `capability-id@version[, capability-id@version, ...]`

        **Example**: `dev.ocs.product.variants@1.0, dev.ocs.order.tracking@2.1`

        **Behavior**:
        - If omitted, server uses latest stable version of each capability
        - If requested version unavailable, server returns closest compatible version
        - Server indicates actual version used in response metadata keys

        **Use Case**: Allows clients to request specific capability versions for backward compatibility during server upgrades.

  headers:
    Accept-OCS-Capabilities:
      schema:
        type: string
      description: |
        Comma-separated list of capability IDs with versions.
        Example: dev.ocs.product.variants@2.0,dev.ocs.order.tracking@1.0
        If omitted, server uses default versions.
        Value: Makes evolution explicit. Servers can innovate without breaking existing clients.

  responses:
    BadRequest:
      description: The request was malformed or invalid.
      content:
        application/ocs+json; version=1.0:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized:
      description: Authentication credentials are required and are missing or invalid.
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden:
      description: The client is not authorized to perform this action.
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Error" }
    NotFound:
      description: The requested resource could not be found.
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Error" }
    Conflict:
      description: A conflict occurred, such as a reused idempotency key with a different request body.
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Error" }
    ServerError:
      description: An unexpected server error occurred.
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Error" }
